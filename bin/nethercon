#!/usr/bin/php
<?php

require('vendor/autoload.php');

use Nether\Common;
use Nether\Console;

use Nether\Console\Meta\Command;
use Nether\Console\Meta\Info;
use Nether\Console\Meta\Arg;
use Nether\Console\Meta\Toggle;
use Nether\Console\Meta\Value;
use Nether\Console\Meta\Error;

class App
extends Nether\Console\Client {

	#[Command('yolo')]
	#[Info('Obviously the best command in the entire suite.')]
	#[Arg('num', 'number of iterations')]
	public function
	YoloArigatoMrRoboto():
	int {

		$Num = (int)$this->GetInput(1);

		while($Num > 0) {
			$Num -= 1;

			echo 'YOLO ARIGATO MR ROBOTO', PHP_EOL;
		}

		return 0;
	}

	#[Command('failboat')]
	#[Info('This fails half the time.')]
	#[Toggle('--hard', 'Fail like all the time.')]
	#[Toggle('--defy', 'Impossible to fail.')]
	#[Error(1, 'accidentally did a thing.')]
	#[Error(2, 'forcefully did a thing.')]
	public function
	Failboat():
	int {

		if($this->GetOption('defy'))
		$this->Quit(0);

		if($this->GetOption('hard'))
		$this->Quit(2);

		if(!!random_int(0, 1))
		$this->Quit(1);

		return 0;
	}

	#[Command('ama')]
	#[Info('Ask me anything. Not sure it will help any though.')]
	#[Error(1, 'you waste my time with nothing.')]
	#[Error(2, 'that does not look like a question.')]
	public function
	AskMeAnything():
	int {

		$Input = $this->Prompt('What would you like to ask me?', '> ');

		if(!$Input)
		$this->Quit(1);

		if(!str_ends_with($Input, '?'))
		$this->Quit(2);

		$this->PrintLn('If you ever see me one day you should ask that.');
		return 0;
	}

	#[Command('sudotest')]
	#[Info('Test privilege escalation.')]
	#[Toggle('--sudo', 'Sudo.')]
	#[Error(1, 'no admin')]
	#[Error(2, 'yes admin')]
	public function
	TestCommandSudoUpgrade():
	int {

		if($this->GetOption('sudo') && $this->Sudo())
		return 0;

		if(posix_getuid() === 0)
		$this->Quit(2);
		else
		$this->Quit(1);

		return 0;
	}

	#[Command('fmt-headers')]
	#[Info('Display an example set of headers.')]
	public function
	FormatHeaders1():
	int {

		$Title = 'Hello Moto';

		$this->PrintLn();
		$this->PrintLn($this->FormatHeaderBlock($Title));
		$this->PrintLn(''
			. 'The above header should have been a massive overwhelming'
			. 'block of block for use in the event an unmissable page '
			. 'break is required. It is styled after the dumb commenting '
			. 'breaks I put in the code too as part of my Nether foolery.'
		);

		$this->PrintLn();
		$this->PrintLn($this->FormatHeaderLine($Title));
		$this->PrintLn(''
			. 'This header is still massive but not as thicc as the '
			. 'previous one. It still is quite demanding of attention '
			. 'and may be better suited for frequent scrolling use.'
		);

		$this->PrintLn();
		$this->PrintLn($this->FormatHeaderPoint($Title));
		$this->PrintLn(''
			. 'This is barely more than a fancy bullet point but it '
			. 'still carries with it the default formatting of headers '
			. 'making it suitable for like a level three heading.'
		);

		$this->PrintLn();

		return 0;
	}

	#[Command('fmt-lists')]
	#[Info('Display an example set of lists.')]
	public function
	FormatLists1():
	int {

		$Title = 'Hello Moto';

		$People = [
			'Captain Jean-Luc Picard'
			=> 'Captain of the U.S.S. Enterprise NCC-1701-D.',

			'Lieutenant Geordi LaForge'
			=> 'Chief Engineer of the U.S.S. Enterprise NCC-1701-D.'
		];

		$this->PrintLn();
		$this->PrintLn($this->FormatHeaderLine('Topic List'));
		$this->PrintLn($this->FormatTopicList($People));

		$this->PrintLn();
		$this->PrintLn($this->FormatHeaderLine('Bullet List'));
		$this->PrintLn($this->FormatBulletList($People));

		$this->PrintLn();

		return 0;
	}

	#[Command('fmt-types')]
	#[Info('Display of the theme types.')]
	#[Toggle('--headers', 'Show example headers, too.')]
	public function
	FormatThemeTypes():
	int {

		$Buffer = new Common\Datastore;
		$Types = new Common\Datastore(Console\Theme::Types);
		$OptHeaders = $this->GetOption('headers') ?: FALSE;

		////////

		$Types->Each(
			fn(string $Type)
			=> $Buffer->Push($this->Format($Type, $Type))
		);

		$this->PrintLn($Buffer->Join(', '), 2);

		////////

		if($OptHeaders) {
			$Buffer->Clear();

			$Types->Each(
				fn(string $Type)
				=> $Buffer
				->Push($this->FormatHeaderLine($Type, $Type))
				->Push('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ac ante pulvinar luctus purus in egestas felis. Praesent convallis metus arcu, nec fringilla orci facilisis hendrerit. Maecenas id lectus sed arcu bibendum molestie. Integer venenatis sollicitudin sapien ut condimentum.')
				->Push('')
			);

			$this->PrintLn(trim($Buffer->Join(PHP_EOL)));
		}

		return 0;
	}

}

exit((new App)->Run());

